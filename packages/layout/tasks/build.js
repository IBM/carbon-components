/**
 * Copyright IBM Corp. 2015, 2018
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

/* eslint-disable no-console */

'use strict';

const { reporter } = require('@carbon/cli-reporter');
const { types: t, generate } = require('@carbon/scss-generator');
const fs = require('fs-extra');
const path = require('path');
const {
  container,
  iconSize,
  spacing,
  layout,
  fluidSpacing,
} = require('../lib');

const FILE_BANNER = t.Comment(` Code generated by @carbon/layout. DO NOT EDIT.

 Copyright IBM Corp. 2018, 2018

 This source code is licensed under the Apache-2.0 license found in the
 LICENSE file in the root directory of this source tree.
`);

function formatStep(name, index) {
  let step = '' + index;
  if (step < 10) {
    step = '0' + step;
  }
  return `${name}-${step}`;
}

async function build() {
  reporter.info('Building scss files for layout...');

  const SCSS_DIR = path.resolve(__dirname, '../scss/generated');
  const files = [
    {
      filepath: path.join(SCSS_DIR, '_spacing.scss'),
      builder() {
        return buildTokenFile(spacing, 'spacing');
      },
    },
    {
      filepath: path.join(SCSS_DIR, '_fluid-spacing.scss'),
      builder() {
        return buildTokenFile(fluidSpacing, 'fluid-spacing');
      },
    },
    {
      filepath: path.join(SCSS_DIR, '_layout.scss'),
      builder() {
        return buildTokenFile(layout, 'layout');
      },
    },
    {
      filepath: path.join(SCSS_DIR, '_container.scss'),
      builder() {
        return buildTokenFile(container, 'container');
      },
    },
    {
      filepath: path.join(SCSS_DIR, '_icon-size.scss'),
      builder() {
        return buildTokenFile(iconSize, 'icon-size');
      },
    },
  ];

  await fs.ensureDir(SCSS_DIR);
  for (const { filepath, builder } of files) {
    const { code } = generate(builder());
    await fs.writeFile(filepath, code);
  }

  reporter.success('Done! ðŸŽ‰');
}

function buildTokenFile(tokenScale, group) {
  const variables = tokenScale.map((value, index) => {
    const name = formatStep(`carbon--${group}`, index + 1);
    const shorthand = formatStep(group, index + 1);
    const id = t.Identifier(name);
    return [
      id,
      t.Assignment({
        id,
        init: t.SassValue(value),
        default: true,
      }),
      name,
      shorthand,
    ];
  });
  const aliases = variables.map(([id, _assignment, name, shorthand]) => {
    const comment = t.Comment(`/ @type Number
/ @access public
/ @group @carbon/layout
/ @alias ${name}`);
    return [
      comment,
      t.Assignment({
        id: t.Identifier(shorthand),
        init: id,
        default: true,
      }),
      t.Newline(),
    ];
  });

  return t.StyleSheet([
    FILE_BANNER,
    t.Newline(),
    ...variables
      .map(([_id, assignment]) => {
        return [
          t.Comment(`/ @type Number
/ @access public
/ @group @carbon/layout`),
          assignment,
          t.Newline(),
        ];
      })
      .reduce((acc, array) => acc.concat(array), []),
    t.Comment(`/ @type List
/ @access public
/ @group @carbon/layout`),
    t.Assignment({
      id: t.Identifier(`carbon--${group}`),
      init: t.SassList({
        elements: variables.map(([id]) => {
          return id;
        }),
      }),
    }),
    t.Newline(),
    ...aliases.reduce((acc, array) => acc.concat(array), []),
  ]);
}

build().catch(error => {
  console.log(error);
  process.exit(1);
});
