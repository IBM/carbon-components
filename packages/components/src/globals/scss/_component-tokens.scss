//
// Copyright IBM Corp. 2020
//
// This source code is licensed under the Apache-2.0 license found in the
// LICENSE file in the root directory of this source tree.
//

@import 'vars';
@import 'theme';
@import 'feature-flags';

$theme-white: 'white';
$theme-g10: 'g10';
$theme-g90: 'g90';
$theme-g100: 'g100';
$theme-v9: 'v9';

$enable-css-custom-properties: feature-flag-enabled('enable-css-custom-properties');

/// Get a component token value for a given theme.
/// @access public
/// @param {Map} $tokens - Map of component tokens
/// @param {String} $theme - Theme identifier
/// @param {String} $name - Token name
/// @example get-token-value($component-tokens, $theme-white, 'tag-background-red');
/// @returns {String} Token value
/// @group component-tokens
@function get-token-value($tokens, $theme, $name) {
  @if $enable-css-custom-properties == true {
    @return var(--#{$custom-property-prefix}-#{$name});
  }

  $options: map-get($tokens, $name);

  @if type-of($options) == 'map' {
    @if map-has-key($options, $theme) {
      $value: map-get($options, $theme);

      @return if(
        $enable-css-custom-properties == true,
        var(--#{$custom-property-prefix}-#{$name}, #{$value}),
        $value
      )
    }

    @error 'Unable to find value for theme';
  }

  @error 'Unable to find map';
}

/// Adds text overflow styling
/// @access public
/// @param {Map} $tokens - Map of component tokens
/// @param {String} $theme - Theme identifier
/// @example @include emit-component-tokens($component-tokens, $theme-white);
/// @group component-tokens
@mixin emit-component-tokens($tokens, $theme) {
  @if $enable-css-custom-properties == true {
    @if type-of($tokens) == 'map' {
      @each $key, $options in $tokens {
        @if map-has-key($options, $theme) {
          $option: map-get($options, $theme);
          --#{$custom-property-prefix}-#{$key}: #{$option};
        }
      }
    } @else {
      @error 'Unable to find map';
    }
  }
}
