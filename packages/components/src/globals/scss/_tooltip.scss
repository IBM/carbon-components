//
// Copyright IBM Corp. 2016, 2018
//
// This source code is licensed under the Apache-2.0 license found in the
// LICENSE file in the root directory of this source tree.
//

@import 'layer';

// Tooltip Icon
// Icon CSS only tooltip
/// @access public
/// @group tooltip
@mixin tooltip--icon {
  @include reset;
  position: relative;
  display: inline-flex;
  align-items: center;
  cursor: pointer;
  overflow: visible;

  // Tooltip - renders as a combo of ::before and ::after elements
  &::before,
  &::after {
    @include type-style('body-short-01');
    position: absolute;
    display: flex;
    align-items: center;
    opacity: 0;
    pointer-events: none;
    transition: opacity $duration--fast-01 motion(standard, productive);
  }

  &::before {
    width: 0;
    height: 0;
    border-style: solid;
    content: '';
  }

  &::after {
    @include layer('overlay');
    min-width: rem(24px);
    max-width: rem(208px);
    height: auto;
    padding: 0.125rem 1rem;
    border-radius: rem(2px);
    color: $inverse-01;
    font-weight: 400;
    content: attr(aria-label);
    text-align: left;
    transform: translateX(-50%);
    pointer-events: none;
    background-color: $inverse-02;
  }

  &:hover,
  &:focus {
    &::before,
    &::after {
      opacity: 1;
    }
  }
}

// Tooltip Icon caret - top position
/// @param {String} $position ['bottom'] - The position, from: `top`, `bottom`
/// @param {String} $align ['center'] - The alignment, from: `start`, `center`, `end`
/// @access public
/// @group tooltip
@mixin tooltip--icon-placement($position: 'bottom', $align: 'center') {
  $caret-spacing: rem(8px); // space between caret and trigger button
  $caret-height: rem(5px);
  $caret-width: rem(8px);
  $translate-caret: #{$caret-height} + #{$caret-spacing};
  $translate-body: 100% + #{$caret-spacing} + #{$caret-height};
  $rotate-caret: set-caret-rotation($position);

  &::before,
  &::after {
    @if ($position == 'top') {
      top: 0;
      left: 50%;
    }
    @if ($position == 'right') {
      top: 50%;
      right: 0;
    }
    @if ($position == 'bottom') {
      bottom: 0;
      left: 50%;
    }
    @if ($position == 'left') {
      top: 50%;
      left: 0;
    }
  }

  &::before {
    @if ($position == 'top') {
      border-width: rem(5px) rem(4px) 0 rem(4px);
      border-color: $inverse-02 transparent transparent transparent;
      transform: translate(-50%, calc(-1 * (#{$translate-caret})));
    }
    @if ($position == 'right') {
      border-width: rem(4px) rem(5px) rem(4px) 0;
      border-color: transparent $inverse-02 transparent transparent;
      transform: translate(calc(#{$translate-caret}), -50%);
    }
    @if ($position == 'bottom') {
      border-width: 0 rem(4px) rem(5px) rem(4px);
      border-color: transparent transparent $inverse-02 transparent;
      transform: translate(-50%, calc(#{$translate-caret}));
    }
    @if ($position == 'left') {
      border-width: rem(4px) 0 rem(4px) rem(5px);
      border-color: transparent transparent transparent $inverse-02;
      transform: translate(calc(-1 * (#{$translate-caret})), -50%);
    }
  }

  &::after {
    @if ($position == 'top') {
      @if ($align == 'start') {
        transform: translate(-1rem, calc(-1 * (#{$translate-body})));
      } @else if ($align == 'end') {
        transform: translate(
          calc(-100% + 1rem),
          calc(-1 * (#{$translate-body}))
        );
      } @else {
        transform: translate(-50%, calc(-1 * (#{$translate-body})));
      }
    }
    @if ($position == 'right') {
      transform: translate(calc(#{$translate-body}), -50%);
    }
    @if ($position == 'bottom') {
      @if ($align == 'start') {
        transform: translate(-1rem, calc(#{$translate-body}));
      } @else if ($align == 'end') {
        transform: translate(calc(-100% + 1rem), calc(#{$translate-body}));
      } @else {
        transform: translate(-50%, calc(#{$translate-body}));
      }
    }
    @if ($position == 'left') {
      transform: translate(calc(-1 * (#{$translate-body})), -50%);
    }
  }
}
